<!doctype html>
<html>
<head>
    <title>PrépaLib{% if block("title") is not empty %} | {% block title %}{% endblock %}{% endif %}</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content="La bibliothèque faite pour les prépas.">
    <link rel="icon" href="{{ asset("images/icon.png") }}">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs/plugins/line-numbers/prism-line-numbers.css">
    {% block stylesheets %}
        {{ encore_entry_link_tags('app') }}
    {% endblock %}

    {% block scripts %}
        <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
        <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
        <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
        <!-- Prism.js core -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
        <!-- Languages -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-c.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-ocaml.min.js"></script>
        <!-- Lines -->
        <script src="https://cdn.jsdelivr.net/npm/prismjs/plugins/line-numbers/prism-line-numbers.min.js"></script>
        {{ encore_entry_script_tags('app') }}
        <script>
            function transformText(text) {
                // CADS
                text.replaceAll(/\\cad /g, 'c\'est-à-dire')

                // CENTERS
                while (text.lastIndexOf("\\center{") !== -1) {
                    let start = text.lastIndexOf("\\center{");
                    let end = start + "\\center{".length;
                    let braces = 1;

                    while (braces > 0 && end < text.length) {
                        if (text[end] === '{') braces++;
                        else if (text[end] === '}') braces--;
                        end++;
                    }

                    let content = text.slice(start + "\\center{".length, end - 1);
                    text = `${text.slice(0, start)}<div class="h-full w-full flex items-center justify-center"><div>${content.trim()}</div></div>${text.slice(end)}`;
                }

                text = text.replace(/`([^\s`]*) ([^`]+)`/g, function(_, lang, content) {
                    return `<code class="language-${lang.trim()}">${content.trim()}</code>`;
                });

                // CODES
                while (text.lastIndexOf("\\code{") !== -1) {
                    let start = text.lastIndexOf("\\code{");
                    let end = start + "\\code{".length;
                    let braces = 1;

                    while (braces > 0 && end < text.length) {
                        if (text[end] === '{') braces++;
                        else if (text[end] === '}') braces--;
                        end++;
                    }

                    let content = text.slice(start + "\\code{".length, end - 1);
                    let language = "";
                    let matcher = /\[([^\[\]]*)\]([\s\S]*)$/.exec(content);
                    if (matcher) {
                        console.log(matcher);
                        language = matcher[1];
                        content = matcher[2];
                    }

                    text = `${text.slice(0, start)}<pre class="line-numbers"><code class="language-${language.trim()}">${content.trim()}</code></pre>${text.slice(end)}`;
                }

                // ORENV
                while (text.lastIndexOf("\\orenv{") !== -1) {
                    let start = text.lastIndexOf("\\orenv{");
                    let end = start + "\\orenv{".length;
                    let braces = 1;

                    while (braces > 0 && end < text.length) {
                        if (text[end] === '{') braces++;
                        else if (text[end] === '}') braces--;

                        if (text[end] === '\\' && end + 1 < text.length && text[end + 1] === '\\' && braces === 1) {
                            text = text.slice(0, end) + '\\\\ \\ou \\\\' + text.slice(end + 2);
                            end = end + '\\\\ \\ou \\\\'.length;
                        } else {
                            end++;
                        }
                    }

                    text = text.slice(0, start) + '\\left|\\;\\begin{array}{l}' + text.slice(start + "\\orenv{".length, end - 1) + '\\end{array}\\right.' + text.slice(end);
                }

                // TRUTH TABLES
                while (text.lastIndexOf("\\truthtable{") !== -1) {
                    let start = text.lastIndexOf("\\truthtable{");
                    let end = start + "\\truthtable{".length;
                    let braces = 1;

                    while (braces > 0 && end < text.length) {
                        if (text[end] === '{') braces++;
                        else if (text[end] === '}') braces--;
                        end++;
                    }

                    let latexContent = '';
                    if (braces === 0) {
                        let content = text.slice(start + "\\truthtable{".length, end - 1);
                        let lines = content.split("\\\\")

                        if (lines.length > 1) {
                            let headers = lines[0].split('&');
                            latexContent = '\\begin{array}{c ' + ('| c'.repeat(headers.length - 1)) + '}';
                            for (let i = 0; i < headers.length; i++) {
                                if (i > 0) latexContent += "&";
                                latexContent += headers[i].trim();
                            }

                            for (let i = 1; i < lines.length; i++) {
                                let cols = lines[i].replaceAll(/[^VF]/g, "");
                                latexContent += '\\\\';
                                if (i === 1) latexContent += '\\hline';
                                for (let j = 0; j < cols.length; j++) {
                                    if (j > 0) latexContent += "&";
                                    latexContent += '\\mathbf{' + cols[j].trim() + '}';
                                }
                            }

                            latexContent += '\\end{array}';
                        }
                    }

                    text = text.slice(0, start) + latexContent + text.slice(end);
                }

                // VARIATION TABLE
                while (text.lastIndexOf("\\vartab{") !== -1) {
                    const start = text.lastIndexOf("\\vartab{");
                    let end = start + "\\vartab{".length;
                    let braces = 1;

                    while (braces > 0 && end < text.length) {
                        if (text[end] === '{') braces++;
                        else if (text[end] === '}') braces--;
                        end++;
                    }

                    let finalContent = '';
                    const content = text.slice(start + "\\vartab{".length, end - 1);
                    const matcher = /\[([^\[\]]+)]\[([^\[\]]+)]\[ *(\[[^\[\]]+\] *(?: *(?:&amp;){2}(?:up|down) *\[[^\[\]]+\])*) *]/g.exec(content);
                    if (matcher && matcher[0] === matcher.input) {
                        const func = matcher[1];
                        const varr = matcher[2];
                        const vals = matcher[3].split(/(?:&amp;){2}/g);

                        let valsArr = [];
                        for (let i = 0; i < vals.length; i++) {
                            const valArgs = /\[([^\[\]]*)\]/g.exec(vals[i])[1].trim().split("&amp;");
                            valsArr.push({
                                value: valArgs[0].trim(),
                                derivativeDefined: valArgs.length > 0 && valArgs[1].trim() !== "null",
                                derivativeNull: valArgs.length > 0 && parseInt(valArgs[1].trim(), 10) === 0,
                                prevArrow: i === 0 ? null : vals[i].trim().startsWith("up") ? "up" : "down",
                                nextArrow: i === vals.length - 1 ? null : vals[i + 1].trim().startsWith("up") ? "up" : "down",
                                functionDefined: valArgs.length !== 4,
                                firstVal: valArgs.length < 3 ? null : valArgs[2].trim(),
                                secondVal: valArgs.length < 4 ? null : valArgs[3].trim(),
                            });
                        }

                        finalContent = `<div class="math-grid" style="grid-template-columns: auto repeat(${valsArr.length * 2 - 1}, 1fr)">`;

                        // First row
                        finalContent += `<div class="first-col first-row">$${varr}$</div>`;
                        for (let i = 0 ; i < valsArr.length; i++) {
                            if (i > 0) finalContent += "<div class=\"first-row\"></div>";
                            finalContent += `<div class="first-row">$${valsArr[i].value}$</div>`;
                        }

                        // Second row
                        finalContent += `<div class="first-col second-row">$${func}\\prim\\par{${varr}}$</div>`;
                        for (let i = 0 ; i < valsArr.length; i++) {
                            if (i > 0) finalContent += `<div class="second-row">$${valsArr[i].prevArrow === "up" ? "+" : "-"}$</div>`;
                            finalContent += `<div class="second-row ${valsArr[i].derivativeDefined ? valsArr[i].derivativeNull ? 'f-null' : '' : 'f-undefined'}">${valsArr[i].derivativeNull ? '$0$' : ''}</div>`;
                        }

                        // Third/Fourth/Fifth rows
                        finalContent += `<div class="first-col func">$${func}\\par{${varr}}$</div>`;
                        for (let i = 0 ; i < valsArr.length; i++) {
                            if (i > 0) finalContent += `<div></div>`;
                            if (!valsArr[i].functionDefined) {
                                finalContent += `<div class="f-undefined">
                                                        <div>$ {^{${valsArr[i].prevArrow === "up" ? valsArr[i].firstVal : ''}}} $</div>
                                                        <div>$ {^{${valsArr[i].nextArrow === "down" ? valsArr[i].secondVal : ''}}} $</div>
                                                 </div>`;
                            } else {
                                finalContent += `<div>$ ${(i === 0 && valsArr[i].nextArrow === "up") || valsArr[i].prevArrow === "up" ? valsArr[i].firstVal : ''} $</div>`;
                            }
                        }

                        for (let i = 0 ; i < valsArr.length; i++) {
                            if (i > 0) finalContent += `<div>$${valsArr[i].prevArrow === "up" ? "\\nearrow" : "\\searrow"}$</div>`;
                            finalContent += `<div${valsArr[i].functionDefined ? '' : ' class="f-undefined"'}></div>`;
                        }

                        for (let i = 0 ; i < valsArr.length; i++) {
                            if (i > 0) finalContent += `<div></div>`;
                            if (!valsArr[i].functionDefined) {
                                finalContent += `<div class="f-undefined">
                                                        <div>$ {_{${valsArr[i].prevArrow === "down" ? valsArr[i].firstVal : ''}}} $</div>
                                                        <div>$ {_{${valsArr[i].nextArrow === "up" ? valsArr[i].secondVal : ''}}} $</div>
                                                 </div>`;
                            } else {
                                finalContent += `<div>$ ${(i === 0 && valsArr[i].nextArrow === "down") || valsArr[i].prevArrow === "down" ? valsArr[i].firstVal : ''} $</div>`;
                            }
                        }

                        finalContent += "</div>";
                    }

                    text = text.slice(0, start) + finalContent + text.slice(end);
                }

                // LISTS
                text = text.replace(/<li>([\s\S]*?)<\/li>/g, function(_, content) {
                    return '<li>' + content.trim() + '</li>';
                });

                let prev = null;
                let regexI = /\\item\s*\[([^\]]*)\]/g;
                let regexL = /\\list\s*\[([^\]]*)\]/g;
                let regexLd = /\\listd\s*\[([^\]]*)\]/g;
                let regexLn = /\\listn\s*\[([^\]]*)\]/g;

                do {
                    prev = text;

                    text = text.replace(regexI, function(_, content){
                        return '<li>' + content.trim() + '</li>';
                    });

                    text = text.replace(regexL, function(_, content){
                        return '<ul class="math-list">' + content.trim() + '</ul>';
                    });

                    text = text.replace(regexLd, function(_, content){
                        return '<ul class="math-list" style="list-style-type: disc">' + content.trim() + '</ul>';
                    });

                    text = text.replace(regexLn, function(_, content){
                        return '<ul class="math-list" style="list-style-type: none">' + content.trim() + '</ul>';
                    });
                } while (text !== prev);

                return text;
            }

            MathJax = {
                startup: {
                    typeset: false,
                    ready: () => {
                        MathJax.startup.defaultReady();

                        if (document.readyState === "loading") {
                            document.addEventListener("DOMContentLoaded", initLatexElements);
                        } else {
                            initLatexElements();
                        }
                    }
                },
                tex: {
                    inlineMath: [['$', '$']],
                    processEscapes: true,
                    macros: {
                        llbracket: '⟦',
                        rrbracket: '⟧',
                        cad: '\\text{c\'est-à-dire}',
                        rg: '\\text{rg}',
                        dim: '\\text{dim}',
                        sup: '\\text{sup}',
                        inf: '\\text{inf}',
                        et: '\\text{et}',
                        etq: '\\quad\\text{et}\\quad',
                        ou: '\\text{ou}',
                        ouq: '\\quad\\text{ou}\\quad',
                        divise: '\\mid',
                        prem: '\\mathbb P',
                        K: '\\mathbb K',
                        C: '\\mathbb C',
                        Rb: '\\overline{\\mathbb R}',
                        R: '\\mathbb R',
                        Q: '\\mathbb Q',
                        Z: '\\mathbb Z',
                        N: '\\mathbb N',
                        Cp: '\\mathbb C_+',
                        Rbp: '\\overline{\\mathbb R}_+',
                        Rp: '\\mathbb R_+',
                        Qp: '\\mathbb Q_+',
                        Zp: '\\mathbb Z_+',
                        Np: '\\mathbb N_+',
                        Cm: '\\mathbb C_-',
                        Rbm: '\\overline{\\mathbb R}_-',
                        Rm: '\\mathbb R_-',
                        Qm: '\\mathbb Q_-',
                        Zm: '\\mathbb Z_-',
                        Nm: '\\mathbb N_-',
                        Cs: "\\mathbb C^*",
                        Rbs: '\\overline{\\mathbb R}^*',
                        Rs: '\\mathbb R^*',
                        Qs: '\\mathbb Q^*',
                        Zs: '\\mathbb Z^*',
                        Ns: '\\mathbb N^*',
                        U: '\\mathbb U',
                        D: '\\mathbb D',
                        H: '\\mathbb H',
                        Cps: "\\mathbb C_+^*",
                        Rbps: '\\overline{\\mathbb R}_+^*',
                        Rps: '\\mathbb R_+^*',
                        Qps: '\\mathbb Q_+^*',
                        Zps: '\\mathbb Z_+^*',
                        Nps: '\\mathbb N_+^*',
                        Cms: "\\mathbb C_-^*",
                        Rbms: '\\overline{\\mathbb R}_-^*',
                        Rms: '\\mathbb R_-^*',
                        Qms: '\\mathbb Q_-^*',
                        Zms: '\\mathbb Z_-^*',
                        Nms: '\\mathbb N_-^*',
                        Rimp: '\\fbox{$\\Rightarrow$}',
                        Limp: '\\fbox{$\\Leftarrow$}',
                        Rincl: '\\fbox{$\\subseteq$}',
                        Lincl: '\\fbox{$\\supseteq$}',
                        conj: ['\\overline{ #1 }', 1],
                        func: ["#1 : #2 \\longrightarrow #3", 3],
                        funclambda: ["#1 \\longrightarrow #2", 2],
                        funcf: [
                            "#1:\\;\\vtop{\\hbox{$\\left\\{\\begin{array}{r@{\\ }c@{\\ }l} #2 & \\longrightarrow & #3 \\\\ #4 & \\longmapsto & #5 \\end{array}\\right.$}}",
                            5
                        ],
                        funcflambda: ["\\begin{array}{c} #1 & \\longrightarrow & #2 \\\\ #3 & \\longmapsto & #4 \\end{array}", 4],
                        funcv: ["#1 : #2 \\longmapsto #3", 3],
                        funcvlambda: ["#1 \\longmapsto #2", 2],
                        odif: ["\\text{ d}#1", 1],
                        par: ["\\left(#1\\right)", 1],
                        cro: ["\\left[#1\\right]", 1],
                        abs: ["\\left\\lvert #1\\right\\rvert", 1],
                        floor: ["\\left\\lfloor #1\\right\\rfloor", 1],
                        ceil: ["\\left\\lceil #1\\right\\rceil", 1],
                        valp: ["v_{ #1 }\\par{ #2 }", 2],
                        e: ["e^{ #1 }", 1],
                        sh: '\\text{sh }',
                        id: '\\text{id }',
                        P: ['\\Pscr\\par{ #1 }', 1],
                        F: ['\\Fscr\\par{; #1, #2}', 2],
                        ind: ["\\mathbb 1_{ #1 }", 1],
                        prim: '^{\'}',
                        seconde: '^{\'\'}',
                        poly: ['#1\\cro{X}', 1],
                        fracrat: ['#1\\par{X}', 1],
                        polydeg: ['\\poly{ #1_{ #2 } }', 2],
                        deriv: ['^{\\par{ #1 }}', 1],
                        ensclasse: ['\\Cscr^{ #1 }\\par{ #2, \\; #3 }', 3],
                        intervii: ["\\left [ #1; #2\\right ]", 2],
                        intervie: ["\\left [ #1; #2\\right [", 2],
                        intervei: ["\\left ] #1; #2\\right ]", 2],
                        intervee: ["\\left ] #1; #2\\right [", 2],
                        intervintii: ["\\llbracket #1; #2 \\rrbracket", 2],
                        intervintie: ["\\llbracket #1; #2 \\llbracket", 2],
                        intervintei: ["\\rrbracket #1; #2 \\rrbracket", 2],
                        intervintee: ["\\rrbracket #1; #2 \\llbracket", 2],
                        pinf: ["{+\\infty}"],
                        minf: ["{-\\infty}"],
                        braces: ["\\left\\{ #1 \\right\\}", 1],
                        cotan: ["\\text{cotan }"],
                        o: ["o\\par{ #1 }", 1],
                        O: ["\\Oscr\\par{ #1 }", 1],
                        permu: ["\\par{ \\begin{array}{l} #1 \\\\ #2 \\end{array} }", 2],
                        cycle: ["\\par{ \\begin{array}{l} #1 \\end{array} }", 1],
                        egqd: ["\\underset{ #1 }{=}", 1],
                        simqd: ["\\underset{ #1 }{\\sim}", 1],
                        norme: ["\\lVert #1 \\rVert", 1],
                        sym: ["\\mathcal S_{ #1 }\\par{ #2 }", 2],
                        ps: ["\\langle #1 \\mid #2 \\rangle", 2],
                        ortho: ["^\\perp"],
                        Aut: ["\\text{Aut}\\par{ #1 }", 1],
                        Hom: ["\\text{Hom}\\par{ #1 }", 1],
                        group: ["\\par{ #1 ,\\; #2 }", 2],
                        ring: ["\\par{ #1 ,\\; #2,\\; #3 }", 3],
                        rel: '\\Rscr',
                        restr: ["#1\\vert_{ #2 }", 2],
                        Arctan: '\\text{Arctan }',
                        Arcsin: '\\text{Arcsin }',
                        Arccos: '\\text{Arccos }',
                        Card: '\\text{Card }',
                        supp: '\\text{supp }',
                        croix: '^{\\times}',
                        Im: '\\text{Im }',
                        Re: '\\text{Re }',
                        Lendo: ['\\Lscr\\par{ #1 }', 1],
                        fami: ['\\mathscr{ #1 }', 1],
                        landoile: '^*',
                        L: ['\\Lscr\\par{ #1, #2 }', 2],
                        Vect: ['\\text{Vect} \\par{ #1 }', 1],
                        GL: ['\\text{GL}_{ #1 }\\par{ #2 }', 2],
                        M: ['\\Mscr_{ #1 }\\par{ #2 }', 2],
                        pass: ['\\Pscr_{ #1 \\longrightarrow #2 }', 2],
                        trans: ['^t\\! #1', 1],
                        tr: '\\text{tr }',
                        Mat: ['\\text{Mat}_{ #1 }\\par{ #2 }', 2],
                        tcoords: ['\\par{\\begin{array}{l} #1 \\\\ #2 \\\\ #3 \\end{array}}', 3],
                        dcoords: ['\\par{\\begin{array}{l} #1 \\\\ #2 \\end{array}}', 2],
                        proba: ['\\mathbb P \\par{ #1 }', 1],
                        loiuniforme: ['\\mathcal U\\par{ #1 }', 1],
                        cov: ['\\text{Cov }\\par{ #1, #2 }', 2],
                        frakA: ['\\mathfrak A_{ #1 }', 1],
                        S: ['\\mathfrak S_{ #1 }', 1],
                        guillemets: ['« \\text{ #1 } »', 1],
                        detb: ['\\text{det}_{ #1 }#1', 1],
                        pdv: ['\\dfrac{\\partial #1 }{\\partial #2 }', 2],
                        pdv2: ['\\dfrac{\\partial^2 #1 }{\\partial #2 \\partial #3 }', 3],
                        iddots: "\\mathinner{\\mkern1mu\\raise1pt\\hbox{.}\\mkern2mu\\raise4pt\\hbox{.}\\mkern2mu\\raise7pt\\hbox{.}}",
                        Ascr: ["\\mathscr{A}"],
                        Bscr: ["\\mathscr{B}"],
                        Cscr: ["\\mathscr{C}"],
                        Dscr: ["\\mathscr{D}"],
                        Escr: ["\\mathscr{E}"],
                        Fscr: ["\\mathscr{F}"],
                        Gscr: ["\\mathscr{G}"],
                        Hscr: ["\\mathscr{H}"],
                        Iscr: ["\\mathscr{I}"],
                        Jscr: ["\\mathscr{J}"],
                        Kscr: ["\\mathscr{K}"],
                        Lscr: ["\\mathscr{L}"],
                        Mscr: ["\\mathscr{M}"],
                        Nscr: ["\\mathscr{N}"],
                        Oscr: ["\\mathscr{O}"],
                        Pscr: ["\\mathscr{P}"],
                        Qscr: ["\\mathscr{Q}"],
                        Rscr: ["\\mathscr{R}"],
                        Sscr: ["\\mathscr{S}"],
                        Tscr: ["\\mathscr{T}"],
                        Uscr: ["\\mathscr{U}"],
                        Vscr: ["\\mathscr{V}"],
                        Wscr: ["\\mathscr{W}"],
                        Xscr: ["\\mathscr{X}"],
                        Yscr: ["\\mathscr{Y}"],
                        Zscr: ["\\mathscr{Z}"],
                    }
                },
                options: {
                    skipHtmlTags: ['script', 'noscript', 'textarea', 'pre'],
                    enableMenu: false
                }
            };

            // Fonction pour initialiser la prévisualisation LaTeX
            const initLatexPreview = (input) => {
                if (!input) return;

                const id = input.id || `latex-preview-${Math.random().toString(36).substr(2, 9)}`;
                input.id = id;

                let previewContainer = input.nextElementSibling;
                if (!previewContainer || !previewContainer.classList.contains('latex-preview-container')) {
                    previewContainer = document.createElement('div');
                    previewContainer.className = 'latex-preview-container mt-2';
                    previewContainer.innerHTML = `
                <div class="text-sm text-text-300">Prévisualisation :</div>
                <div class="latex-preview whitespace-pre p-4 bg-foreground-400 rounded" data-preview-for="${id}"></div>
            `;
                    input.parentNode.insertBefore(previewContainer, input.nextSibling);
                }

                const preview = previewContainer.querySelector('.latex-preview');

                const render = () => {
                    preview.innerHTML = input.value;
                    renderLatex(preview);
                };

                input.addEventListener('input', render);
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Tab') {
                        e.preventDefault();
                        const start = this.selectionStart;
                        const end = this.selectionEnd;

                        this.value = this.value.substring(0, start) + "\t" + this.value.substring(end);

                        this.selectionStart = this.selectionEnd = start + 1;
                    }
                });

                render();
            };

            const renderLatex = (element) => {
                element.innerHTML = transformText(element.innerHTML);
                if (window.MathJax && MathJax.typesetPromise) {
                    MathJax.typesetPromise([element]);
                }

                element.querySelectorAll('code').forEach((code) => {
                    Prism.highlightElement(code);
                })
            }

            const initLatexElements = () => {
                // Initialisation des prévisualisations existantes
                document.querySelectorAll('.latex-input').forEach(initLatexPreview);
                document.querySelectorAll('.latex').forEach(renderLatex);

                // Initialisation automatique des latex preview ajoutées et les latex tout court
                const observer = new MutationObserver((mutations) => {
                    for (const mutation of mutations) {
                        for (const addedNode of mutation.addedNodes) {
                            if (addedNode.nodeType !== Node.ELEMENT_NODE) continue;

                            addedNode.querySelectorAll('.latex-input').forEach(initLatexPreview);
                            addedNode.querySelectorAll('.latex').forEach(renderLatex);
                        }
                    }
                });

                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
            }
        </script>
        <script>
            const ExercisePref = (function() {
                function setPref(exerciseId, data, after = function () {}, afterError = function () {}) { // data example: {"favorite": true}
                    const url = "{{ path('api_set_exercise_preference', {'exercise': 'EXERCISE_ID'}) }}".replaceAll('EXERCISE_ID', exerciseId);
                    fetch(url, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify(data)
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Erreur HTTP : ' + response.status);
                            }

                            return response.json();
                        })
                        .then(data => {
                            updatePrefContainers([data.pref]);
                            after()
                        })
                        .catch(error => {
                            console.error('Erreur fetch :', error); // TODO : NOTIFICATION
                            afterError();
                        });
                }

                function updatePrefContainers(prefs) {
                    for (const pref of prefs) {
                        document.querySelectorAll(`.exercise-prefs-${pref.exercise}`).forEach(container => {
                            const doneT = container.querySelector(".done .true");
                            if (pref.done) doneT.classList.remove("hidden!");
                            else doneT.classList.add("hidden!");

                            const doneF = container.querySelector(".done .false");
                            if (pref.done) doneF.classList.add("hidden!");
                            else doneF.classList.remove("hidden!");

                            const favoriteT = container.querySelector(".favorite .true");
                            if (pref.favorite) favoriteT.classList.remove("hidden!");
                            else favoriteT.classList.add("hidden!");

                            const favoriteF = container.querySelector(".favorite .false");
                            if (pref.favorite) favoriteF.classList.add("hidden!");
                            else favoriteF.classList.remove("hidden!");

                            const difficultyContainer = container.querySelector(".difficulty");
                            const unselectedColor = difficultyContainer.dataset.unselectedColor;

                            difficultyContainer.querySelectorAll(".difficulty-element").forEach(element => {
                                const selectedColor = element.dataset.selectedColor;
                                if (parseInt(element.dataset.difficulty) === pref.difficulty) {
                                    element.classList.remove(unselectedColor);
                                    element.classList.add(selectedColor);
                                } else {
                                    element.classList.remove(selectedColor);
                                    element.classList.add(unselectedColor);
                                }
                            })

                            const nonCommentedText = container.querySelector(".non-commented-text");
                            const commentContainer = container.querySelector(".comment-container");

                            if (pref.comment.trim() === "") {
                                nonCommentedText.classList.remove("hidden");
                                commentContainer.classList.add("hidden");
                                commentContainer.innerText = "";
                            } else {
                                nonCommentedText.classList.add("hidden");
                                commentContainer.classList.remove("hidden");
                                commentContainer.innerText = pref.comment;
                            }
                        });
                    }
                }

                return {
                    setPref: setPref
                }
            })();

            const RevisionElementPref = (function() {
                function setPref(elementId, data, after = function () {}, afterError = function () {}) { // data example: {"difficulty": 2}
                    const url = "{{ path('api_set_revision_element_preference', {'element': 'ELEMENT_ID'}) }}".replaceAll('ELEMENT_ID', elementId);
                    fetch(url, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify(data)
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Erreur HTTP : ' + response.status);
                            }

                            return response.json();
                        })
                        .then(data => {
                            updatePrefContainers([data.pref]);
                            after()
                        })
                        .catch(error => {
                            console.error('Erreur fetch :', error); // TODO : NOTIFICATION
                            afterError();
                        });
                }

                function updatePrefContainers(prefs) {
                    for (const pref of prefs) {
                        document.querySelectorAll(`.revision-prefs-${pref.revisionElement}`).forEach(container => {
                            const difficultyContainer = container.querySelector(".difficulty");
                            const unselectedColor = difficultyContainer.dataset.unselectedColor;

                            difficultyContainer.querySelectorAll(".difficulty-element").forEach(element => {
                                const selectedColor = element.dataset.selectedColor;
                                if (parseInt(element.dataset.difficulty) === pref.difficulty) {
                                    element.classList.remove(unselectedColor);
                                    element.classList.add(selectedColor);
                                } else {
                                    element.classList.remove(selectedColor);
                                    element.classList.add(unselectedColor);
                                }
                            })
                        });
                    }
                }

                return {
                    setPref: setPref
                }
            })();
        </script>
    {% endblock %}
</head>
<body class="text-text-100 font-noto-sans bg-background-500 min-h-[100dvh] min-w-[100dvw] p-0 m-0 select-none">
    <div class="fixed top-4 right-4 space-y-3 z-50">
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div
                    x-data="{ show: true }"
                    x-init="setTimeout(() => show = false, 4000)"
                    x-show="show"
                    x-transition:enter="transition ease-out duration-300"
                    x-transition:enter-start="opacity-0 translate-y-2"
                    x-transition:enter-end="opacity-100 translate-y-0"
                    x-transition:leave="transition ease-in duration-300"
                    x-transition:leave-start="opacity-100 translate-y-0"
                    x-transition:leave-end="opacity-0 translate-y-2"
                    class="px-4 py-3 rounded-lg shadow-lg text-sm flex items-start gap-2 w-80
                        {% if label == 'success' %}
                            bg-accent-green-900 border border-accent-green-800
                        {% elseif label == 'error' %}
                            bg-accent-red-900 border border-accent-red-800
                        {% elseif label == 'warning' %}
                            bg-accent-yellow-900 border border-accent-yellow-800
                        {% else %}
                            bg-accent-blue-900 border border-accent-blue-800
                        {% endif %}
                    " role="alert">

                    <span class="flex-1">{{ message|raw }}</span>

                    <button type="button" class="ml-2 text-gray-400 hover:text-gray-200 simple" @click="show = false">
                        <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg"
                             fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
            {% endfor %}
        {% endfor %}
</div>
    <twig:Loader />
    {% block body %}
    {% endblock %}
</body>
</html>
